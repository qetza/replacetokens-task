{
  "id": "A8515EC8-7254-4FFD-912C-86772E2B5962",
  "name": "replacetokens",
  "friendlyName": "Replace Tokens",
  "description": "This version of the task is deprecated, use replacetokens@5 (node10) or replacetokens@6 (node16) task instead.",
  "helpMarkDown": "[Learn more about this task](https://github.com/qetza/replacetokens-task/blob/master/tasks/ReplaceTokensV4/README.md)",
  "category": "Utility",
  "visibility": [
    "Build",
    "Release"
  ],
  "author": "Guillaume ROUCHON",
  "version": {
    "Major": 4,
    "Minor": 4,
    "Patch": 2
  },
  "releaseNotes": "Added output variables (breaking change).<br/>Added token pattern dropdown (breaking change).",
  "instanceNameFormat": "Replace tokens in $(targetFiles)",
  "minimumAgentVersion": "2.105.0",
  "deprecated": true,
  "deprecationMessage": "The replacetokens@4 task has been deprecated. Use replacetokens@5 (node10) or replacetokens@6 (node16) task instead.",
  "groups": [
    {
      "name": "validations",
      "displayName": "Validations",
      "isExpanded": true
    },
    {
      "name": "transforms",
      "displayName": "Transformations",
      "isExpanded": false
    },
    {
      "name": "variables",
      "displayName": "Variables",
      "isExpanded": false
    },
    {
      "name": "advanced",
      "displayName": "Advanced",
      "isExpanded": false
    }
  ],
  "inputs": [
    {
      "name": "rootDirectory",
      "type": "filePath",
      "label": "Root directory",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "Base directory for searching files. If not specified the default working directory will be used."
    },
    {
      "name": "targetFiles",
      "type": "multiLine",
      "label": "Target files",
      "defaultValue": "**/*.config",
      "required": true,
      "helpMarkDown": "Absolute or relative comma or newline-separated paths to the files to replace tokens (wildcards can be used).<br/>Syntax: {file path}[ => {output path}]<br/>Example: 'web.config' will replace tokens in web.config and update the file.<br/>Example: 'config\\*.tokenized.config => *.config' will replace tokens in config\\{filename}.tokenized.config and save the result in config\\{filename}.config."
    },
    {
      "name": "encoding",
      "type": "pickList",
      "label": "Files encoding",
      "defaultValue": "auto",
      "required": true,
      "options": {
        "auto": "auto",
        "ascii": "ascii",
        "utf-7": "utf-7",
        "utf-8": "utf-8",
        "utf-16le": "utf-16",
        "utf-16be": "utf-16 (big endian)",
        "win1252": "windows 1252",
        "iso88591": "iso 8859-1"
      },
      "helpMarkDown": "Specify the files encoding.<br/>The 'auto' value will determine the encoding based on the Byte Order Mark (BOM) if present; otherwise it will use ascii."
    },
    {
      "name": "tokenPattern",
      "type": "pickList",
      "label": "Token pattern",
      "defaultValue": "default",
      "required": true,
      "options": {
        "default": "#{ ... }#",
        "rm": "__ ... __",
        "octopus": "#{ ... }",
        "azpipelines": "$( ... )",
        "doublebraces": "{{ ... }}",
        "custom": "custom"
      },
      "helpMarkDown": "Specify the token pattern. Use custom to specify your own prefix and suffix"
    },
    {
      "name": "tokenPrefix",
      "type": "string",
      "label": "Token prefix",
      "defaultValue": "#{",
      "required": true,
      "visibleRule": "tokenPattern == custom",
      "helpMarkDown": "The prefix of the tokens to search in the target files."
    },
    {
      "name": "tokenSuffix",
      "type": "string",
      "label": "Token suffix",
      "defaultValue": "}#",
      "required": true,
      "visibleRule": "tokenPattern == custom",
      "helpMarkDown": "The suffix of the tokens to search in the target files."
    },
    {
      "name": "writeBOM",
      "type": "boolean",
      "label": "Write unicode BOM",
      "defaultValue": "true",
      "required": true,
      "helpMarkDown": "If checked writes an unicode Byte Order Mark (BOM).",
      "visibleRule": "encoding != ascii && encoding != win1252 && encoding != iso88591"
    },
    {
      "name": "escapeType",
      "type": "pickList",
      "defaultValue": "auto",
      "label": "Escape values type",
      "helpMarkDown": "Specify how to escape variable values.",
      "options": {
        "auto": "auto",
        "none": "no escaping",
        "json": "json",
        "xml": "xml",
        "custom": "custom"
      }
    },
    {
      "name": "escapeChar",
      "type": "string",
      "label": "Escape character",
      "visibleRule": "escapeType == custom",
      "helpMarkDown": "The escape character to use when escaping characters in the variable values."
    },
    {
      "name": "charsToEscape",
      "type": "string",
      "label": "Characters to escape",
      "visibleRule": "escapeType == custom",
      "helpMarkDown": "Characters in variable values to escape before replacing tokens."
    },
    {
      "name": "verbosity",
      "type": "pickList",
      "label": "Verbosity",
      "defaultValue": "normal",
      "options": {
        "normal": "normal",
        "detailed": "detailed",
        "off": "off"
      },
      "helpMarkDown": "Specify the logs verbosity level. (error and system debug are always on)"
    },
    {
      "name": "actionOnMissing",
      "type": "pickList",
      "label": "Action on missing variable",
      "defaultValue": "warn",
      "groupName": "validations",
      "required": true,
      "options": {
        "continue": "silently continue",
        "warn": "log warning",
        "fail": "fail"
      },
      "helpMarkDown": "Specify the action on a missing variable."
    },
    {
      "name": "keepToken",
      "type": "boolean",
      "label": "Keep token for missing variable",
      "defaultValue": "false",
      "groupName": "validations",
      "required": true,
      "helpMarkDown": "If checked tokens with missing variables will not be replaced by empty string."
    },
    {
      "name": "actionOnNoFiles",
      "type": "pickList",
      "label": "Action on no file processed",
      "defaultValue": "continue",
      "groupName": "validations",
      "required": true,
      "options": {
        "continue": "silently continue",
        "warn": "log warning",
        "fail": "fail"
      },
      "helpMarkDown": "Specify the action when no file was processed."
    },
    {
      "name": "enableTransforms",
      "type": "boolean",
      "label": "Enable transformations",
      "defaultValue": "false",
      "groupName": "transforms",
      "required": true,
      "helpMarkDown": "If checked transformations can be applied on variable values.<br/>Syntax: {token prefix}{transformation name}{transform prefix}{token}{transform suffix}{token suffix}<br/>Example: #{lower(MyVar)}#"
    },
    {
      "name": "transformPrefix",
      "type": "string",
      "label": "Transform prefix",
      "defaultValue": "(",
      "groupName": "transforms",
      "required": true,
      "helpMarkDown": "The prefix between transform name and token name.",
      "visibleRule": "enableTransforms == true"
    },
    {
      "name": "transformSuffix",
      "type": "string",
      "label": "Transform suffix",
      "defaultValue": ")",
      "groupName": "transforms",
      "required": true,
      "helpMarkDown": "The suffix after the token name.",
      "visibleRule": "enableTransforms == true"
    },
    {
      "name": "variableFiles",
      "type": "multiLine",
      "label": "Files (JSON or YAML)",
      "defaultValue": "",
      "groupName": "variables",
      "required": false,
      "helpMarkDown": "Absolute or relative comma or newline-separated paths to the files containing additional variables (wildcards can be used). YAML files must have the .yml or .yaml extension otherwise the file is treated as JSON."
    },
    {
      "name": "inlineVariables",
      "type": "multiLine",
      "label": "Inline variables (YAML syntax)",
      "defaultValue": "",
      "groupName": "variables",
      "required": false,
      "helpMarkDown": "A YAML formatted string containing inline variables."
    },
    {
      "name": "variableSeparator",
      "type": "string",
      "label": "Separator",
      "defaultValue": ".",
      "groupName": "variables",
      "required": false,
      "helpMarkDown": "The separtor to use in variable names for nested objects in inline variables or variable files.<br/>Example: {'My':{'Value':'Hello World!'}} will create a variable 'My.Value' with the value 'Hello World!'"
    },
    {
      "name": "enableRecursion",
      "type": "boolean",
      "label": "Enable recursion in values",
      "defaultValue": "false",
      "groupName": "advanced",
      "required": true,
      "helpMarkDown": "If checked token replacement (with transformation) will be run on values.<br/>Example: \"Say: #{value1}#\" with value1 = \"hello #{upper(value2)}#\" and value2 = \"world!\" will result in \"hello WORLD!\"."
    },
    {
      "name": "useLegacyPattern",
      "type": "boolean",
      "label": "Use legacy pattern",
      "defaultValue": "false",
      "groupName": "advanced",
      "required": true,
      "helpMarkDown": "If checked whitespaces between the token prefix/suffix and the variable name are not ignored."
    },
    {
      "name": "useLegacyEmptyFeature",
      "type": "boolean",
      "label": "Use legacy empty/default feature",
      "defaultValue": "true",
      "groupName": "advanced",
      "required": false,
      "helpMarkDown": "If check use the old empty & default values features."
    },
    {
      "name": "useDefaultValue",
      "type": "boolean",
      "label": "Use default value",
      "defaultValue": "false",
      "groupName": "advanced",
      "required": false,
      "helpMarkDown": "If check replace variable not found with a default value.",
      "visibleRule": "useLegacyEmptyFeature == false"
    },
    {
      "name": "emptyValue",
      "type": "string",
      "label": "Empty value",
      "defaultValue": "(empty)",
      "groupName": "advanced",
      "required": false,
      "helpMarkDown": "The variable value which will be replaced by an empty string.",
      "visibleRule": "useLegacyEmptyFeature == true"
    },
    {
      "name": "defaultValue",
      "type": "string",
      "label": "Default value",
      "defaultValue": "",
      "groupName": "advanced",
      "required": false,
      "helpMarkDown": "The value to be used if a variable is not found. Do not set to disable default value feature with the legacy feature.",
      "visibleRule": "useLegacyEmptyFeature == true || useDefaultValue == true"
    },
    {
      "name": "enableTelemetry",
      "type": "boolean",
      "label": "Send anonymous usage telemetry",
      "defaultValue": "true",
      "groupName": "advanced",
      "required": true,
      "helpMarkDown": "If checked anonymous usage data will be sent to the task author for task usage analysis."
    }
  ],
  "outputVariables": [
    {
      "name": "tokenReplacedCount",
      "description": "Total number of tokens replaced."
    },
    {
      "name": "tokenFoundCount",
      "description": "Total number of tokens found."
    },
    {
      "name": "fileProcessedCount",
      "description": "Total number of files processed."
    },
    {
      "name": "transformExecutedCount",
      "description": "Total number of transformations executed."
    },
    {
      "name": "defaultValueCount",
      "description": "Total number of default value used."
    }
  ],
  "execution": {
    "Node": {
      "target": "index.js"
    }
  }
}